import requests
import yaml
import logging

def load_config():
    try:
        with open("config.yaml", "r") as config_file:
            return yaml.safe_load(config_file)
    except Exception as e:
        logging.error(f"Error loading config: {e}")
        return None

def build_cve_payload(cve_info):
    # print(cve_info)

    baseSeverity = "N/A"
    baseScore = "N/A"
    cvss_version = "N/A"

    if "metrics" in cve_info["containers"]["cna"]:
        cvss_versions = {
            "cvssV3_1": "3.1",
            "cvssV3_0": "3.0",
            "cvssV2_0": "2.0",
        }
        metrics = cve_info["containers"]["cna"]["metrics"][0].items()
        for metric_key, metric_value in metrics:
            if metric_key in cvss_versions.keys():
                cvss_version = cvss_versions[metric_key]
                baseSeverity = metric_value["baseSeverity"]
                baseScore = metric_value["baseScore"]
                break

    colors = {
        "INFO": "ðŸ”µ",
        "LOW": "ðŸŸ¢",
        "MEDIUM": "ðŸŸ¡",
        "HIGH": "ðŸŸ ",
        "CRITICAL": "ðŸ”´"
    }

    cve_info["colors"] = colors.get(baseSeverity, "ðŸ”µ")
    
    message = (
        f"*New {cve_info['tech'].capitalize()} {cve_info['cveMetadata']['cveId']}*\n"
        f"CVSS v{cvss_version} Score: *{baseScore}*. Severity: *{baseSeverity}* {cve_info['colors']}\n"
        f"_Published: {cve_info['cveMetadata']['datePublished'][:10]}_\n"
        f"Descriptions:\n{cve_info['containers']['cna']['descriptions'][0]['value']}"
    )

    payload = {
        "text": message
    }

    return payload

def send_msg(payload):
    config = load_config()
    if not config:
        logging.error("Config file not found!")
        return False
    GOOGLE_CHAT_WEBHOOK = config["credentials"]["google-chat-webhook"]
    response = requests.post(GOOGLE_CHAT_WEBHOOK, json=payload)
    if response.status_code == 200:
        return True
    else:
        logging.error(f"Error sending message to Google Chat: {response.status_code} {response.text}")
        return False

def send_cve_to_chat(cve_info):
    payload = build_cve_payload(cve_info)
    if send_msg(payload):
        logging.info(f"[OK] Send message to Google Chat. {cve_info['cveMetadata']['cveId']}")
        return True
    else:
        logging.error(f"[ERR] Send message to Google Chat. {cve_info['cveMetadata']['cveId']}")
        return False
